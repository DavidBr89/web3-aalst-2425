// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(50)
  lastName  String
  email     String   @unique
  password  String
  profileId Int?     @unique
  profile   Profile? @relation(fields: [profileId], references: [id])

  @@map("users")
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String
  userId    Int?
  user      User?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  price       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  Int?
  category    Category?   @relation(fields: [categoryId], references: [id])
  orderLines  OrderLine[]

  // @@unique([name, price])
  // @@index([name, price])
  @@map("products")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Order {
  id         Int         @id @default(autoincrement())
  totalPrice Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderLines OrderLine[]
}

model OrderLine {
  id        Int     @id @default(autoincrement())
  qty       Int     @default(1)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
}
